name: Archibus-Automated-Scheduler
description: "Automated Archibus scheduler using Selenium in Docker"

inputs:
  scheduling_args:
    description: "Full CLI argument string for main.py"
    required: true

runs:
  using: "composite"
  steps:
    # âœ… No checkout needed here since your workflow already does it

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: python -m pip install -r requirements.txt
      shell: bash

    - name: Stop and Remove Selenium container if present
      run: |
        if [ "$(docker ps -q -f name=selenium)" ]; then
          docker stop selenium
          docker rm selenium
        else
          echo "No Selenium container running"
        fi
      shell: bash

    - name: Pull Selenium Chrome Docker image
      run: docker pull selenium/standalone-chrome:latest
      shell: bash

    - name: Start Selenium Chrome container
      run: docker run -d --name selenium -p 4444:4444 --shm-size=2g selenium/standalone-chrome:latest
      shell: bash

    - name: Wait for Selenium to become ready
      run: |
        curl -sSL https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -o wait-for-it.sh
        chmod +x wait-for-it.sh
        ./wait-for-it.sh localhost:4444 --timeout=30 -- echo "Selenium is ready"
      shell: bash

    - name: Extra wait for good measure
      run: sleep 5
      shell: bash

    - name: Run Archibus Scheduler Python script
      run: python src/main.py ${{ inputs.scheduling_args }}
      shell: bash

    - name: Stop and Remove Selenium container
      run: |
        docker stop selenium
        docker rm selenium
      shell: bash


